name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Test:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v3

  #   - name: Create .env.test file for testing
  #     run: |
  #       echo "DOMAIN=${{ secrets.DOMAIN }}" > .env.test
  #       echo "REDIS_HOST=redis" >> .env.test
  #       echo "REDIS_PORT=6379" >> .env.test
  #       echo "TELEGRAM_API_KEY=qwerty" >> .env.test
  #       echo "PORT=80" >> .env.test
  #       echo "WEB_PORT=8081" >> .env.test
  #       echo "CLIENT_PORT=8080" >> .env.test
  #       echo "API_QUOTA=100" >> .env.test
  #       echo "EXPIRY_HOURS=100" >> .env.test

  #   - name: Start services
  #     run: |
  #       docker compose --env-file .env.test -f configs/docker/docker-compose.yml -f configs/docker/docker-compose.test.yml --profile test up --build --force-recreate -d

  #   - name: Wait for services
  #     run: sleep 10

  #   - name: Run backend tests
  #     run: |
  #       docker compose --env-file .env.test -f configs/docker/docker-compose.yml -f configs/docker/docker-compose.test.yml exec shortener go test -p=1 ./... --cover

  #   - name: Run frontend tests
  #     run: |
  #       docker compose --env-file .env.test -f configs/docker/docker-compose.yml -f configs/docker/docker-compose.test.yml exec client npm run test

  #   - name: Stop services
  #     run: |
  #       docker compose --env-file .env.test -f configs/docker/docker-compose.yml -f configs/docker/docker-compose.test.yml down

  Build:
    runs-on: ubuntu-latest

    # needs: Test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/shortener:latest -f configs/docker/Dockerfile.prod .

    - name: Tag Docker image
      run: |
        docker tag ${{ secrets.DOCKER_USERNAME }}/shortener:latest ${{ secrets.DOCKER_USERNAME }}/shortener:${{ github.sha }}

    - name: Push Docker image to DockerHub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/shortener:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/shortener:${{ github.sha }}
